apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'org.greenrobot.greendao'//GreenDao

greendao {
    schemaVersion 1
    //daoPackage 'com.greendao.gen'
    targetGenDir 'src/main/java'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        ndk {
            moduleName "hello_jni"
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }


    signingConfigs {
        release {
            storeFile file("MyTestApplication.jks")
            storePassword RELEASE_STORE_KEY
            keyAlias RELEASE_ALIAS
            keyPassword RELEASE_ALIAS_KEY
        }
        debug {
            storeFile file("MyTestApplication.jks")
            storePassword RELEASE_STORE_KEY
            keyAlias RELEASE_ALIAS
            keyPassword RELEASE_ALIAS_KEY
        }
    }

    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            zipAlignEnabled true
//            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//          构建时多渠道重命名
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith("apk") && "release".equals(variant.buildType.name)) {
                        def apk = new File(output.outputFile.getParent() + "/${variant.buildType.name}", "MyTestAplication_${variant.flavorName}_v${variant.versionName}_${getTime()}.apk")
                        output.outputFile = apk
                    }
                }
            }
        }
        debug {
            multiDexEnabled true
            minifyEnabled false
            zipAlignEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//          构建时多渠道重命名
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith("apk") && "debug".equals(variant.buildType.name)) {
                        def apk = new File(output.outputFile.getParent() + "/${variant.buildType.name}", "MyTestAplication_${variant.flavorName}_v${variant.versionName}_${getTime()}.apk")
                        output.outputFile = apk
                    }
                }
////              插装测试覆盖率代码，覆盖率框架我选择的是emma，并且不可混淆apk代码
//                if ('dev'.equals(variant.flavorName)&& "debug".equals(variant.buildType.name)) {
//                    variant.javaCompile.doLast {
//                        def coverageFile = file('out/coverage,em')
//                        if (coverageFile.exists())
//                            coverageFile.delete()
////                        使用javaexec命令执行java应用程序进程插装，插装模式使用的是overwrite，就是插装后覆盖源文件
//                        javaexec {
//                            main 'emma'
//                            args 'instr', '-ip', variant.javaCompile.destinationDir, '-m', 'overwrite', '-out', 'out/coverage.em'
//                            classpath files(new File(getSdkDirectory(), 'tools/lib/emma.jar'))
//                        }
//                    }
//                }
            }
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError true
        disable 'MissingTranslation'
    }

    productFlavors {
        development {
            applicationId "com.example.alphadog.mytestappliction.development"
            buildConfigField('String', 'url', '"111111"')
            versionName = '1.0'
        }
        google {
            applicationId "com.example.alphadog.mytestappliction.google"
            buildConfigField('String', 'url', '"aaaaaa"')
            versionName = '1.0a'
        }
        wandoujia {
            applicationId "com.example.alphadog.mytestappliction.wandoujia"
            buildConfigField('String', 'url', '"bbbbbb"')
            versionName = '1.0b'
        }
    }

    productFlavors.all { flavors ->
        print(name)
        manifestPlaceholders.put("CHANNEL", name)
    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/jni/']
//        manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
//        resources.srcDirs = ['src/main/java', 'src/main/aidl']
            aidl.srcDirs = ['src/main/aidl']
//        res.srcDirs = ['src/main/res']
//        assets.srcDirs = ['src/main/assets']
        }
    }
}

def getTime() {
    def time = new Date().format('yyyyMMdd-HH')
    return time;
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    //    插装测试覆盖率代码的依赖
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    //    动画框架
    compile 'com.nineoldandroids:library:2.4.0'
    //    网络图片缓存框架
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.dagger:dagger:2.6'
    apt 'com.google.dagger:dagger-compiler:2.6'
    //    依赖插装框架
    //    devCompile files(new File(android.getSdkDirectory(), 'tools/lib/emma_device.jar'))
    //    二维码扫描
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'cn.yipianfengye.android:zxing-library:2.1'
    compile 'org.greenrobot:greendao:3.2.0'
}
